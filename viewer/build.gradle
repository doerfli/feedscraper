buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${gradleNodePlugin}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'

group = "li.doerf.feeder"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutines}")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("org.postgresql:postgresql")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }
    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")

    testRuntime("com.h2database:h2")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

sourceSets.create("webapp") {
    resources.srcDir("src/webapp/resources")
    resources.srcDir("src/webapp/generated")
}

sourceSets {
    main {
        compileClasspath += sourceSets["webapp"].output
        runtimeClasspath += sourceSets["webapp"].output
    }
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

noArg {
    annotation("li.doerf.feeder.scraper.util.NoArg")
}

node {
    version = '10.15.3'
    yarnVersion = '1.16.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    yarnWorkDir = file('src/webapp/main')
    nodeModulesDir = file('src/webapp/main')
}

task yarnInstall(type: YarnTask) {
    args = ["install"]
}

task compileVue(type: YarnTask) {
    args = ["build"]
}

compileVue.dependsOn yarnInstall
processWebappResources.dependsOn compileVue

clean.doFirst {
    delete "${rootDir}/src/webapp/generated/"
    delete "${rootDir}/src/webapp/main/node_modules/"
    delete "${rootDir}/src/webapp/main/yarn-latest/"
}
